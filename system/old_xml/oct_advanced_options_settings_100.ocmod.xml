<?xml version="1.0" encoding="utf-8"?>
<modification>
	<code>oct_advanced_options_settings_100</code>
	<name>Octemplates - Advanced options settings</name>
	<version>1.0.0</version>
	<author>Octemplates</author>
	<link>http://octemplates.net/</link>
	<file path="admin/controller/catalog/product.php">
    	<operation error="skip">
			<search><![CDATA[foreach ($product_images as $product_image) {]]></search>
			<add position="after"><![CDATA[
			// oct_images_by_options start
			$data['oct_images_by_options_data'] = $this->config->get('oct_images_by_options_data');
			$oct_images_by_options_data = $this->config->get('oct_images_by_options_data');
        
			if (isset($oct_images_by_options_data['status']) && $oct_images_by_options_data['status']) {
        		@$image_by_option = $this->model_catalog_product->getProductOptionsToImage($this->request->get['product_id'], $product_image['product_image_id']);
			} else {
				$image_by_option = array();
			}
			// oct_images_by_options end
			]]></add>
    	</operation>
		<operation error="skip">
			<search><![CDATA['thumb'      => $this->model_tool_image->resize($thumb, 100, 100),]]></search>
			<add position="after"><![CDATA[
			// oct_images_by_options start
			'image_by_option' => $image_by_option,
			// oct_images_by_options end
			]]></add>
    	</operation>
  	</file>
  	<file path="admin/model/catalog/product.php">
    	<operation error="skip">
			<search index="0"><![CDATA[$this->db->query("DELETE FROM " . DB_PREFIX . "product_image WHERE product_id = '" . (int)$product_id . "'");]]></search>
			<add position="after"><![CDATA[
			// oct_images_by_options start
			$oct_images_by_options_data = $this->config->get('oct_images_by_options_data');
			
			if (isset($oct_images_by_options_data['status']) && $oct_images_by_options_data['status']) {
				$this->db->query("DELETE FROM " . DB_PREFIX . "oct_product_image_by_option WHERE product_id = '" . (int)$product_id . "'");
			}
			// oct_images_by_options end
			]]></add>
    	</operation>
		<operation error="skip">
			<search index="1"><![CDATA[$this->db->query("INSERT INTO " . DB_PREFIX . "product_image SET product_id = '" . (int)$product_id . "', image = '" . $this->db->escape($product_image['image']) . "', sort_order = '" . (int)$product_image['sort_order'] . "'");]]></search>
			<add position="after"><![CDATA[
			// oct_images_by_options start
			if (isset($oct_images_by_options_data['status']) && $oct_images_by_options_data['status']) {
				$product_image_id = $this->db->getLastId();

				if (isset($product_image['image_by_option'])) {
            		foreach ($product_image['image_by_option'] as $option_value_id) {
						$this->db->query("INSERT INTO " . DB_PREFIX . "oct_product_image_by_option SET product_id = '" . (int)$product_id . "', product_image_id = '" . (int)$product_image_id . "', option_value_id = '" . (int)$option_value_id . "'");
					}
				}
			}
			// oct_images_by_options end
			]]></add>
    	</operation>
		<operation error="skip">
			<search index="1"><![CDATA[$this->db->query("DELETE FROM " . DB_PREFIX . "product_image WHERE product_id = '" . (int)$product_id . "'");]]></search>
			<add position="after"><![CDATA[
			// oct_images_by_options start
			$oct_images_by_options_data = $this->config->get('oct_images_by_options_data');
        
			if (isset($oct_images_by_options_data['status']) && $oct_images_by_options_data['status']) {
				$this->db->query("DELETE FROM " . DB_PREFIX . "oct_product_image_by_option WHERE product_id = '" . (int)$product_id . "'");
			}
			// oct_images_by_options end
			]]></add>
    	</operation>
		<operation error="skip">
			<search><![CDATA[public function copyProduct($product_id) {]]></search>
			<add position="before"><![CDATA[
			// oct_images_by_options start
			public function getProductOptionsToImage($product_id, $product_image_id) {
				$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "oct_product_image_by_option WHERE product_id = '" . (int)$product_id . "' AND product_image_id = '" . (int)$product_image_id . "'");

				$option_value_id_data = array();

				if ($query->rows) {
	            	foreach ($query->rows as $row) {
						$option_value_id_data[] = $row['option_value_id'];
					}
				}

				return $option_value_id_data;
			}
			// oct_images_by_options end
			]]></add>
    	</operation>
  	</file>
  	<file path="admin/view/template/catalog/product_form.tpl">
    	<operation error="skip">
			<search><![CDATA[<td class="text-left"><?php echo $entry_image; ?></td>]]></search>
			<add position="after"><![CDATA[
			<?php if (isset($oct_images_by_options_data['status']) && $oct_images_by_options_data['status']) { ?>
            <!-- oct_images_by_options start -->
			<td class="text-left"><?php echo $entry_option_value; ?></td>
			<!-- oct_images_by_options end -->
			<?php } ?>
			]]></add>
    	</operation>
		<operation error="skip">
			<search><![CDATA[<td class="text-right"><input type="text" name="product_image[<?php echo $image_row; ?>][sort_order]" value="<?php echo $product_image['sort_order']; ?>" placeholder="<?php echo $entry_sort_order; ?>" class="form-control" /></td>]]></search>
			<add position="before"><![CDATA[
			<?php if (isset($oct_images_by_options_data['status']) && $oct_images_by_options_data['status']) { ?>
			<!-- oct_images_by_options start -->
			<td class="text-right">
            	<?php asort($product_options); foreach ($product_options as $product_option) { ?>
					<?php if ($product_option['type'] == 'radio' || $product_option['type'] == 'checkbox' || $product_option['type'] == 'select') { ?>
					<div class="col-sm-6 col-md-6 col-lg-4">
						<div class="well well-sm" style="height: 130px; overflow: auto;text-align:left;margin-bottom:4px;">
                    	<?php if (isset($option_values[$product_option['option_id']])) { ?>
							<?php foreach ($option_values[$product_option['option_id']] as $option_value) { ?>
							<label>
								<?php if (in_array($option_value['option_value_id'], $product_image['image_by_option'])) { ?>
								<input type="checkbox" name="product_image[<?php echo $image_row; ?>][image_by_option][]" value="<?php echo $option_value['option_value_id']; ?>" checked="checked"/> <?php echo $product_option['name']; ?> > <?php echo $option_value['name']; ?></label>
								<?php } else { ?>
								<input type="checkbox" name="product_image[<?php echo $image_row; ?>][image_by_option][]" value="<?php echo $option_value['option_value_id']; ?>" /> <?php echo $product_option['name']; ?> > <?php echo $option_value['name']; ?></label>
								<?php } ?>
								<br/>
							<?php } ?>
						<?php } ?>
						</div>
					</div>
					<?php } ?>
				<?php } ?>
			</td>
			<!-- oct_images_by_options end -->
			<?php } ?>
			]]></add>
    	</operation>
		<operation error="skip">
			<search><![CDATA[html += '  <td class="text-right"><input type="text" name="product_image[' + image_row + '][sort_order]" value="" placeholder="<?php echo $entry_sort_order; ?>" class="form-control" /></td>';]]></search>
			<add position="before"><![CDATA[
			<?php if (isset($oct_images_by_options_data['status']) && $oct_images_by_options_data['status']) { ?>
        	// oct_images_by_options start
			html += '  <td class="text-right">';
            <?php asort($product_options); foreach ($product_options as $product_option) { ?>
				<?php if ($product_option['type'] == 'radio' || $product_option['type'] == 'checkbox' || $product_option['type'] == 'select') { ?>
				html += '    <div class="col-sm-6 col-md-6 col-lg-4">';
				html += '      <div class="well well-sm" style="height: 130px; overflow: auto;text-align:left;margin-bottom:4px;">';
				<?php if (isset($option_values[$product_option['option_id']])) { ?>
					<?php foreach ($option_values[$product_option['option_id']] as $option_value) { ?>
					html += '            <label><input type="checkbox" name="product_image[' + image_row + '][image_by_option][]" value="<?php echo $option_value['option_value_id']; ?>" /> <?php echo $product_option['name']; ?> > <?php echo $option_value['name']; ?></label><br/>';
					<?php } ?>
				<?php } ?>

				html += '      </div>';
				html += '    </div>';
				<?php } ?>
            <?php } ?>
			
			html += '  </td>';
			// oct_images_by_options end
			<?php } ?>
			]]></add>
    	</operation>
	</file>
	<file path="catalog/controller/product/product.php">
    	<operation error="skip">
			<search><![CDATA[if (!$option_value['subtract'] || ($option_value['quantity'] > 0)) {]]></search>
			<add position="replace"><![CDATA[
			// oct_images_by_options start
			if (!$option_value['subtract'] || ($option_value['quantity'] >= 0)) {
			// if (!$option_value['subtract'] || ($option_value['quantity'] > 0)) {
			// oct_images_by_options end
			]]></add>
    	</operation>
		<operation error="skip">
			<search><![CDATA['product_option_value_id' => $option_value['product_option_value_id'],]]></search>
			<add position="after"><![CDATA[
			// oct_images_by_options start
			'quantity_status'         => ($option_value['quantity'] <= 0) ? false : true, //add
			// oct_images_by_options end
			]]></add>
    	</operation>
		<operation error="skip">
			<search><![CDATA['image'                   => $option_value['image'] ? $this->model_tool_image->resize($option_value['image'], 50, 50) : '',]]></search>
			<add position="replace"><![CDATA[
			'image'                   => $option_value['image'] ? $this->model_tool_image->resize($option_value['image'], 100, 100) : '',
			]]></add>
    	</operation>
		<operation error="skip">
			<search><![CDATA[$results = $this->model_catalog_product->getProductImages($this->request->get['product_id']);]]></search>
			<add position="replace" offset="8"><![CDATA[
			$data['oct_images_by_options_data']= $oct_images_by_options_data = $this->config->get('oct_images_by_options_data');
			$oct_luxury_data = $this->config->get('oct_luxury_data');
			
	        $data['check_zoom'] = $check_zoom = (isset($oct_luxury_data['pr_zoom']) && $oct_luxury_data['pr_zoom'] == 'on') ? true : false;
	        $data['pr_gallery'] = $pr_gallery = isset($oct_luxury_data['pr_gallery']) ? $oct_luxury_data['pr_gallery'] : '0';
			
			$this->document->addScript('catalog/view/theme/oct_luxury/js/fancy-box/jquery.fancybox.min.js');
			$this->document->addStyle('catalog/view/theme/oct_luxury/js/fancy-box/jquery.fancybox.min.css');
			
			if ($check_zoom) {
		        $this->document->addScript('catalog/view/theme/oct_luxury/js/cloud-zoom/cloud-zoom.1.0.3.min.js');
		        $this->document->addStyle('catalog/view/theme/oct_luxury/js/cloud-zoom/cloud-zoom.css');
	        }
	
	        $results = $this->model_catalog_product->getProductImages($this->request->get['product_id']);
	
			$data['images'][] = array(
	        	'popup' => $this->model_tool_image->resize($product_info['image'], $this->config->get($this->config->get('config_theme') . '_image_popup_width'), $this->config->get($this->config->get('config_theme') . '_image_popup_height')),
				'thumb' => $this->model_tool_image->resize($product_info['image'], $this->config->get($this->config->get('config_theme') . '_image_additional_width'), $this->config->get($this->config->get('config_theme') . '_image_additional_height')),
				'main_img'   => $this->model_tool_image->resize($product_info['image'], $this->config->get($this->config->get('config_theme') . '_image_thumb_width'), $this->config->get($this->config->get('config_theme') . '_image_thumb_height')),
	            'main_popup' => $this->model_tool_image->resize($product_info['image'], $this->config->get($this->config->get('config_theme') . '_image_popup_width'), $this->config->get($this->config->get('config_theme') . '_image_popup_height'))
			);
	
			foreach ($results as $result) {
	        	$data['images'][] = array(
					'popup' => $this->model_tool_image->resize($result['image'], $this->config->get($this->config->get('config_theme') . '_image_popup_width'), $this->config->get($this->config->get('config_theme') . '_image_popup_height')),
					'thumb' => $this->model_tool_image->resize($result['image'], $this->config->get($this->config->get('config_theme') . '_image_additional_width'), $this->config->get($this->config->get('config_theme') . '_image_additional_height')),
					'main_img'   => $this->model_tool_image->resize($result['image'], $this->config->get($this->config->get('config_theme') . '_image_thumb_width'), $this->config->get($this->config->get('config_theme') . '_image_thumb_height')),
					'main_popup' => $this->model_tool_image->resize($result['image'], $this->config->get($this->config->get('config_theme') . '_image_popup_width'), $this->config->get($this->config->get('config_theme') . '_image_popup_height'))
				);
			}
			]]></add>
    	</operation>
		<operation error="skip">
			<search><![CDATA[public function index() {]]></search>
			<add position="before"><![CDATA[
	        public function update_prices() {
		        $json = array();
		        
				if (isset($this->request->request['product_id']) && isset($this->request->request['quantity'])) {
					$this->load->model('catalog/product');
					
					$json['special'] = 0;
					$json['you_save'] = false;
					
					$option_price = 0;
					$product_id = (int)$this->request->request['product_id'];
					$quantity = (int)$this->request->request['quantity'];
					$product_options = $this->model_catalog_product->getProductOptions($product_id);
					
					$product_info = $this->db->query("SELECT p.price, p.tax_class_id, (SELECT price FROM " . DB_PREFIX . "product_discount pd2 WHERE pd2.product_id = p.product_id AND pd2.customer_group_id = '" . (int)$this->config->get('config_customer_group_id') . "' AND pd2.quantity <= '" . (int)$quantity . "' AND ((pd2.date_start = '0000-00-00' OR pd2.date_start < NOW()) AND (pd2.date_end = '0000-00-00' OR pd2.date_end > NOW())) ORDER BY pd2.quantity DESC, pd2.priority ASC, pd2.price ASC LIMIT 1) AS discount, (SELECT price FROM " . DB_PREFIX . "product_special ps WHERE ps.product_id = p.product_id AND ps.customer_group_id = '" . (int)$this->config->get('config_customer_group_id') . "' AND ((ps.date_start = '0000-00-00' OR ps.date_start < NOW()) AND (ps.date_end = '0000-00-00' OR ps.date_end > NOW())) ORDER BY ps.priority ASC, ps.price ASC LIMIT 1) AS special FROM " . DB_PREFIX . "product p LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (p.product_id = p2s.product_id) WHERE p.product_id = '" . (int)$product_id . "' AND p.status = '1' AND p.date_available <= NOW() AND p2s.store_id = '" . (int)$this->config->get('config_store_id') . "'");
					
					if (!empty($this->request->request['option'])) {
						$option = $this->request->request['option'];
					} else {
						$option = array();
					}
			
					foreach($product_options as $product_option) {
						if (is_array($product_option['product_option_value'])) {
							foreach($product_option['product_option_value'] as $option_value) {
								if (isset($option[$product_option['product_option_id']])) {
									if (($option[$product_option['product_option_id']] == $option_value['product_option_value_id']) || ((is_array($option[$product_option['product_option_id']])) && (in_array($option_value['product_option_value_id'], $option[$product_option['product_option_id']])))) {
										if ($option_value['price_prefix'] == '+') {
											$option_price+= $option_value['price'];
										} elseif ($option_value['price_prefix'] == '-') {
											$option_price-= $option_value['price'];
										}
									}
								}
							}
						}
					}
					
					$price = $product_info->row['discount'] ? (float)$product_info->row['discount'] * (int)$quantity + (float)$option_price * (int)$quantity : (float)$product_info->row['price'] * (int)$quantity + (float)$option_price * (int)$quantity;
					
					$special = $product_info->row['special'] ? (float)$product_info->row['special'] * (int)$quantity + (float)$option_price * (int)$quantity : 0;
					
					if ($special) {
						$json['special'] = $this->currency->format($this->tax->calculate($special, $product_info->row['tax_class_id'], $this->config->get('config_tax')), $this->session->data['currency']);
						$json['you_save'] =  '-' . number_format(((float)$price - (float)$special) / (float)$price * 100, 0) . '%';
					}
					
					$json['price'] = $this->currency->format($this->tax->calculate($price, $product_info->row['tax_class_id'], $this->config->get('config_tax')), $this->session->data['currency']);
					
					$json['tax'] = $this->currency->format((float)$special ? $special : $price, $this->session->data['currency']);
				}
			
				$this->response->addHeader('Content-Type: application/json');
				$this->response->setOutput(json_encode($json));
			}
			
			public function getPImages() {
				if (isset($this->request->get['product_id']) && $this->request->get['product_id']) {
					$json = array();
					$this->load->model('catalog/product');
					$this->load->model('tool/image');
					
					$product_info = $this->model_catalog_product->getProduct($this->request->get['product_id']);
					
					if (isset($this->request->get['image_width'])) {
						$popup_width = (int)$this->request->get['image_width'];
					} else {
						$popup_width = $this->config->get($this->config->get('config_theme') . '_image_popup_width');
					}
				
					if (isset($this->request->get['image_height'])) {
						$popup_height = (int)$this->request->get['image_height'];
					} else {
						$popup_height = $this->config->get($this->config->get('config_theme') . '_image_popup_height');
					}
				
					if (isset($this->request->get['image_additional_width'])) {
						$thumb_width = (int)$this->request->get['image_additional_width'];
					} else {
						$thumb_width = $this->config->get($this->config->get('config_theme') . '_image_additional_width');
					}
				
					if (isset($this->request->get['image_additional_height'])) {
						$thumb_height = (int)$this->request->get['image_additional_height'];
					} else {
						$thumb_height = $this->config->get($this->config->get('config_theme') . '_image_additional_height');
					}
					
					$main_img_width = $this->config->get($this->config->get('config_theme') . '_image_thumb_width');
			  		$main_img_height = $this->config->get($this->config->get('config_theme') . '_image_thumb_height');
					
					if (isset($this->request->post['option'])) {
						$opt_array = array();
						foreach($this->request->post['option'] as $value) {
							if (is_array($value)) {
								foreach($value as $val) {
									if ($val) {
										$opt_array[] = $this->model_catalog_product->getProductOptionValueId($this->request->get['product_id'], $val);
									}
								}
							} else {
								if ($value) {
									$opt_array[] = $this->model_catalog_product->getProductOptionValueId($this->request->get['product_id'], $value);
								}
							}
						}
				
						$results = $this->model_catalog_product->getProductImagesByOptionValueId($this->request->get['product_id'], $opt_array);
						
						foreach($results as $result) {
							$json['images'][] = array(
								'popup' => $this->model_tool_image->resize($result['image'], $popup_width, $popup_height),
								'thumb' => $this->model_tool_image->resize($result['image'], $thumb_width, $thumb_height),
								'main_img'   => $this->model_tool_image->resize($result['image'], $main_img_width, $main_img_height),
								'main_popup' => $this->model_tool_image->resize($result['image'], $popup_width, $popup_height)
							);
						}
					} else {
						$results = false;
					}
				
					if (!$results) {
						$results = $this->model_catalog_product->getProductImages($this->request->get['product_id']);
						
						$json['images'][] = array(
							'popup' => $this->model_tool_image->resize($product_info['image'], $popup_width, $popup_height),
							'thumb' => $this->model_tool_image->resize($product_info['image'], $thumb_width, $thumb_height),
							'main_img'   => $this->model_tool_image->resize($product_info['image'], $main_img_width, $main_img_height),
							'main_popup' => $this->model_tool_image->resize($product_info['image'], $popup_width, $popup_height)
						);
						
						foreach($results as $result) {
							$json['images'][] = array(
								'popup' => $this->model_tool_image->resize($result['image'], $popup_width, $popup_height),
								'thumb' => $this->model_tool_image->resize($result['image'], $thumb_width, $thumb_height),
								'main_img'   => $this->model_tool_image->resize($result['image'], $main_img_width, $main_img_height),
								'main_popup' => $this->model_tool_image->resize($result['image'], $popup_width, $popup_height)
							);
						}
					}
					
					if (isset($this->request->get['pr_gallery']) && $this->request->get['pr_gallery']) {
						$json['slick_index'] = 0;
						
						if ($product_info['meta_h1']) {
							$json['heading_title'] = $product_info['meta_h1'];
						} else {
							$json['heading_title'] = $product_info['name'];
						}
						
						if ($this->customer->isLogged() || !$this->config->get('config_customer_price')) {
							$json['price'] = $this->currency->format($this->tax->calculate($product_info['price'], $product_info['tax_class_id'], $this->config->get('config_tax')), $this->session->data['currency']);
						} else {
							$json['price'] = false;
						}
			
						if ((float)$product_info['special']) {
							$json['special'] = $this->currency->format($this->tax->calculate($product_info['special'], $product_info['tax_class_id'], $this->config->get('config_tax')), $this->session->data['currency']);
						} else {
							$json['special'] = false;
						}
						
						if (isset($this->request->get['slick_index']) && $this->request->get['slick_index']) {
							$json['slick_index'] = $this->request->get['slick_index'];
						}
						
						$this->response->setOutput($this->load->view('product/product_gallery', $json));	
					} else {
						$this->response->addHeader('Content-Type: application/json');
						$this->response->setOutput(json_encode($json));
					}
				} else {
					$this->response->redirect($this->url->link('common/home', '', true));
				}
			}
			]]></add>
		</operation>
	</file>
	<file path="catalog/controller/product/category.php">
    	<operation error="skip">
			<search><![CDATA[$data['products'][] = array(]]></search>
			<add position="before"><![CDATA[
			// oct_images_by_options start
	        $oct_options = array();
	
	        $oct_images_by_options_data = $this->config->get('oct_images_by_options_data');
	
	        foreach ($this->model_catalog_product->getProductOptions($result['product_id']) as $option) {
				$product_option_value_data = array();
	
				if (isset($oct_images_by_options_data['allowed_options']) && (in_array($option['option_id'], $oct_images_by_options_data['allowed_options']))) {
	            	foreach ($option['product_option_value'] as $option_value) {
						if (!$option_value['subtract'] || ($option_value['quantity'] >= 0)) {
	
							if ((($this->config->get('config_customer_price') && $this->customer->isLogged()) || !$this->config->get('config_customer_price')) && (float)$option_value['price']) {
								$oct_option_price = $this->currency->format($this->tax->calculate($option_value['price'], $result['tax_class_id'], $this->config->get('config_tax') ? 'P' : false), $this->session->data['currency']);
							} else {
								$oct_option_price = false;
							}
	
			                $product_option_value_data[] = array(
								'product_option_value_id' => $option_value['product_option_value_id'],
								'option_value_id'         => $option_value['option_value_id'],
								'name'                    => $option_value['name'],
								'image'                   => $option_value['image'] ? $this->model_tool_image->resize($option_value['image'], 50, 50) : '',
								'price'                   => $oct_option_price,
								'price_prefix'            => $option_value['price_prefix']
			               );
						}
					}
	
		            $oct_options[] = array(
						'product_option_id'    => $option['product_option_id'],
						'product_option_value' => $product_option_value_data,
						'option_id'            => $option['option_id'],
						'name'                 => $option['name'],
						'type'                 => $option['type'],
						'value'                => $option['value'],
						'required'             => $option['required']
		            );
				}
	        }
	        // oct_images_by_options end
			]]></add>
    	</operation>
		<operation error="skip">
			<search><![CDATA[$data['products'][] = array(]]></search>
			<add position="after"><![CDATA[
			// oct_images_by_options start
			'oct_options' => $oct_options,
			// oct_images_by_options end
			]]></add>
    	</operation>
	</file>
	<file path="catalog/controller/product/search.php">
    	<operation error="skip">
			<search><![CDATA[$data['products'][] = array(]]></search>
			<add position="before"><![CDATA[
			// oct_images_by_options start
	        $oct_options = array();
	
	        $oct_images_by_options_data = $this->config->get('oct_images_by_options_data');
	
	        foreach ($this->model_catalog_product->getProductOptions($result['product_id']) as $option) {
				$product_option_value_data = array();
	
				if (isset($oct_images_by_options_data['allowed_options']) && (in_array($option['option_id'], $oct_images_by_options_data['allowed_options']))) {
	            	foreach ($option['product_option_value'] as $option_value) {
						if (!$option_value['subtract'] || ($option_value['quantity'] >= 0)) {
	
							if ((($this->config->get('config_customer_price') && $this->customer->isLogged()) || !$this->config->get('config_customer_price')) && (float)$option_value['price']) {
								$oct_option_price = $this->currency->format($this->tax->calculate($option_value['price'], $result['tax_class_id'], $this->config->get('config_tax') ? 'P' : false), $this->session->data['currency']);
							} else {
								$oct_option_price = false;
							}
	
							$product_option_value_data[] = array(
								'product_option_value_id' => $option_value['product_option_value_id'],
								'option_value_id'         => $option_value['option_value_id'],
								'name'                    => $option_value['name'],
								'image'                   => $option_value['image'] ? $this->model_tool_image->resize($option_value['image'], 50, 50) : '',
								'price'                   => $oct_option_price,
								'price_prefix'            => $option_value['price_prefix']
							);
						}
					}
	
					$oct_options[] = array(
						'product_option_id'    => $option['product_option_id'],
						'product_option_value' => $product_option_value_data,
						'option_id'            => $option['option_id'],
						'name'                 => $option['name'],
						'type'                 => $option['type'],
						'value'                => $option['value'],
						'required'             => $option['required']
					);
				}
	        }
	        // oct_images_by_options end
			]]></add>
    	</operation>
		<operation error="skip">
			<search><![CDATA[$data['products'][] = array(]]></search>
			<add position="after"><![CDATA[
			// oct_images_by_options start
			'oct_options' => $oct_options,
			// oct_images_by_options end
			]]></add>
    	</operation>
	</file>
	<file path="catalog/controller/product/special.php">
    	<operation error="skip">
			<search><![CDATA[$data['products'][] = array(]]></search>
			<add position="before"><![CDATA[
			// oct_images_by_options start
	        $oct_options = array();
	
	        $oct_images_by_options_data = $this->config->get('oct_images_by_options_data');
	
	        foreach ($this->model_catalog_product->getProductOptions($result['product_id']) as $option) {
				$product_option_value_data = array();
	
				if (isset($oct_images_by_options_data['allowed_options']) && (in_array($option['option_id'], $oct_images_by_options_data['allowed_options']))) {
	            	foreach ($option['product_option_value'] as $option_value) {
						if (!$option_value['subtract'] || ($option_value['quantity'] >= 0)) {
	
							if ((($this->config->get('config_customer_price') && $this->customer->isLogged()) || !$this->config->get('config_customer_price')) && (float)$option_value['price']) {
							$oct_option_price = $this->currency->format($this->tax->calculate($option_value['price'], $result['tax_class_id'], $this->config->get('config_tax') ? 'P' : false), $this->session->data['currency']);
							} else {
								$oct_option_price = false;
							}
	
			                $product_option_value_data[] = array(
								'product_option_value_id' => $option_value['product_option_value_id'],
								'option_value_id'         => $option_value['option_value_id'],
								'name'                    => $option_value['name'],
								'image'                   => $option_value['image'] ? $this->model_tool_image->resize($option_value['image'], 50, 50) : '',
								'price'                   => $oct_option_price,
								'price_prefix'            => $option_value['price_prefix']
							);
						}
					}
	
		            $oct_options[] = array(
						'product_option_id'    => $option['product_option_id'],
						'product_option_value' => $product_option_value_data,
						'option_id'            => $option['option_id'],
						'name'                 => $option['name'],
						'type'                 => $option['type'],
						'value'                => $option['value'],
						'required'             => $option['required']
		            );
				}
	        }
	        // oct_images_by_options end
			]]></add>
    	</operation>
		<operation error="skip">
			<search><![CDATA[$data['products'][] = array(]]></search>
			<add position="after"><![CDATA[
			// oct_images_by_options start
			'oct_options' => $oct_options,
			// oct_images_by_options end
			]]></add>
    	</operation>
	</file>
	<file path="catalog/controller/product/manufacturer.php">
    	<operation error="skip">
			<search><![CDATA[$data['products'][] = array(]]></search>
			<add position="before"><![CDATA[
			// oct_images_by_options start
	        $oct_options = array();
	
	        $oct_images_by_options_data = $this->config->get('oct_images_by_options_data');
	
	        foreach ($this->model_catalog_product->getProductOptions($result['product_id']) as $option) {
				$product_option_value_data = array();
	
				if (isset($oct_images_by_options_data['allowed_options']) && (in_array($option['option_id'], $oct_images_by_options_data['allowed_options']))) {
	            	foreach ($option['product_option_value'] as $option_value) {
						if (!$option_value['subtract'] || ($option_value['quantity'] >= 0)) {
	
							if ((($this->config->get('config_customer_price') && $this->customer->isLogged()) || !$this->config->get('config_customer_price')) && (float)$option_value['price']) {
								$oct_option_price = $this->currency->format($this->tax->calculate($option_value['price'], $result['tax_class_id'], $this->config->get('config_tax') ? 'P' : false), $this->session->data['currency']);
							} else {
								$oct_option_price = false;
							}
	
			                $product_option_value_data[] = array(
								'product_option_value_id' => $option_value['product_option_value_id'],
								'option_value_id'         => $option_value['option_value_id'],
								'name'                    => $option_value['name'],
								'image'                   => $option_value['image'] ? $this->model_tool_image->resize($option_value['image'], 50, 50) : '',
								'price'                   => $oct_option_price,
								'price_prefix'            => $option_value['price_prefix']
			               );
						}
					}
	
		            $oct_options[] = array(
						'product_option_id'    => $option['product_option_id'],
						'product_option_value' => $product_option_value_data,
						'option_id'            => $option['option_id'],
						'name'                 => $option['name'],
						'type'                 => $option['type'],
						'value'                => $option['value'],
						'required'             => $option['required']
		            );
				}
	        }
	        // oct_images_by_options end
			]]></add>
    	</operation>
		<operation error="skip">
			<search><![CDATA[$data['products'][] = array(]]></search>
			<add position="after"><![CDATA[
			// oct_images_by_options start
			'oct_options' => $oct_options,
			// oct_images_by_options end
			]]></add>
    	</operation>
	</file>
	<file path="catalog/model/catalog/product.php">
		<operation error="skip">
			<search><![CDATA[public function getProductImages($product_id) {]]></search>
			<add position="before"><![CDATA[
	        // oct_images_by_options start
	        public function getProductImagesByOptionValueId($product_id, $options) {
				$sql = "SELECT * FROM " . DB_PREFIX . "product_image pi LEFT JOIN " . DB_PREFIX . "oct_product_image_by_option pito ON (pi.product_image_id = pito.product_image_id) WHERE pi.product_id = '" . (int)$product_id . "'";
	
				$implode = array();
	
				foreach ($options as $option) {
	            	$implode[] = $option;
				}
	
				$sql .= " AND pito.option_value_id IN (" . implode(',', $implode) . ") GROUP BY pi.image ORDER BY pi.sort_order ASC";
	
				$query = $this->db->query($sql);
	
				return $query->rows;
	        }
	
	        public function getProductOptionValueId($product_id, $product_option_value_id) {
				$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product_option_value WHERE product_id = '" . (int)$product_id . "' AND product_option_value_id = '" . (int)$product_option_value_id . "'");
	
				return $query->row['option_value_id'];
	        }
	        // oct_images_by_options end
			]]></add>
    	</operation>
	</file>
</modification>